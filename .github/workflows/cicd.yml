# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

# 동작 조건 설정 : develop 브런치에 push가 발생할 경우 동작한다.
on:
  push:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 설정모듈 있는 Config
      - name: Checkout
        uses: actions/checkout@v1
        with:
          token: ${{ secrets.ACTION_TOKEN }}
          submodules: true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle # 실제 application build(-x 옵션을 통해 test는 제외)
        run: ./gradlew clean build # -x test

#      - name: Test with Gradle # test application build
#        run: ./gradlew test


#      # 2. Spring Boot 애플리케이션 빌드
#      - name: Build with Gradle
#        run: ./gradlew build
#        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
#        with:
##          arguments: clean bootJar
#          arguments: clean build

#      # 2.1. 빌드시 생성되는 index.html을 rest-docs bucket에 업로드
#      - name: rest-docs upload
#        uses: shallwefootball/s3-upload-action@master
#        id: S3
#        with:
#          aws_key_id: ${{ secrets.NCP_ACCESS_KEY_ID }}
#          aws_secret_access_key: ${{ secrets.NCP_SECRET_ACCESS_KEY }}
#          aws_bucket: ${{ secrets.REST_DOCS_BUCKET }}
##          DEFAULT_REGION: ${{ secrets.DEFAULT_REGION }}
#          source_dir: ./server-api/src/main/resources/static/docs
#          # 저장소에 index.html 없어서 빌드가 안되던것.
##        run: aws --endpoint-url=https://kr.object.ncloudstorage.com s3 cp ./../../server-api/src/main/resources/static/docs/index.html s3://$REST_DOCS_BUCKET/api/index.html
##        run: |
##          aws --endpoint-url=https://kr.object.ncloudstorage.com
##          s3 cp --recursive ./../../server-api/src/main/resources/static/docs/index.html
##          s3://$REST_DOCS_BUCKET/api/index.html

      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/dpmbackdevelop .

      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/dpmbackdevelop

  # 위 과정에서 푸시한 이미지를 클라우드 서버에서 pull 받아서 실행시키는 과정
  run-docker-image-on-cloud:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지를 풀
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/dpmbackdevelop

      # 2. 기존의 컨테이너를 중지
      - name: docker stop container
        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      #      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
      #      - name: docker run new container
      #        run: sudo docker run --name github-actions-demo --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/dpmbackdevelop
      - name: docker compose up
        run: sudo docker-compose up -d

      # 4. 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: sudo docker system prune -f


#        env:
#          NCP_ACCESS_KEY_ID: ${{ secrets.NCP_ACCESS_KEY_ID }}
#          NCP_SECRET_ACCESS_KEY: ${{ secrets.NCP_SECRET_ACCESS_KEY }}
#          REST-DOCS-BUCKET: ${{ secrets.REST_DOCS_BUCKET }} #https://kr.object.ncloudstorage.com/rest-docs/api
