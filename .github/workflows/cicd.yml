# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

# 동작 조건 설정 : develop 브런치에 push가 발생할 경우 동작한다.
on:
  push:
    branches: [ "release" , "develop"]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 설정모듈 있는 Config
      - name: Checkout
        uses: actions/checkout@v1
        with:
          token: ${{ secrets.ACTION_TOKEN }}
          submodules: true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

        # 어차피 이렇게 빌드해도, api 모듈에는 docs 관련해서 파일이 없음. -> 왜냐? bootjar로 빌드하니까 리소스를 포함 안함.
      - name: Build with Gradle
        run: ./gradlew clean build

      # 3. Docker 이미지 빌드 - release
      - name: docker image build - release
        if: github.ref == 'refs/heads/release'
        run: docker build -f Dockerfile-release -t ${{ secrets.DOCKERHUB_USERNAME }}/dpmback-release .

      # 3. Docker 이미지 빌드 - develop
      - name: docker image build - develop
        if: github.ref == 'refs/heads/develop'
        run: docker build -f Dockerfile-develop -t ${{ secrets.DOCKERHUB_USERNAME }}/dpmback-develop .

      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Docker Hub 이미지 푸시 - release
      - name: docker Hub push - release
        if: github.ref == 'refs/heads/release'
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/dpmback-release

      # 5. Docker Hub 이미지 푸시 - develop
      - name: docker Hub push - develop
        if: github.ref == 'refs/heads/develop'
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/dpmback-develop

  # 위 과정에서 푸시한 이미지를 클라우드 서버에서 pull 받아서 실행시키는 과정
  run-docker-image-on-cloud:
    needs: build-docker-image
    runs-on: self-hosted # 클라우드 서버에서 아래 job 명령어들을 실행

    steps:
      # 1. 최신 이미지를 풀 - release
      - name: docker pull - release
        if: github.ref == 'refs/heads/release'
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/dpmback-release

      # 1. 최신 이미지를 풀 - develop
      - name: docker pull - develop
        if: github.ref == 'refs/heads/develop'
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/dpmback-develop

      # 특정 네트워크에 연결된 컨테이너를 중지하고 삭제 - release 네트워크 예시
      - name: Stop and remove containers in release network
        if: github.ref == 'refs/heads/release'
        run: |
          if sudo docker network inspect root_dpm-network-release &>/dev/null; then
            CONTAINER_IDS=$(sudo docker network inspect release_dpm-network-release -f '{{range .Containers}}{{.Name}} {{end}}')
            if [ ! -z "$CONTAINER_IDS" ]; then
              sudo docker stop $CONTAINER_IDS
              sudo docker rm $CONTAINER_IDS
            fi
          else
            echo "Network root_dpm-network-release does not exist."
          fi

      # 특정 네트워크에 연결된 컨테이너를 중지하고 삭제 - develop 네트워크 예시
      - name: Stop and remove containers in develop network
        if: github.ref == 'refs/heads/develop'
        run: |
          if sudo docker network inspect develop_dpm-network-develop &>/dev/null; then
            CONTAINER_IDS=$(sudo docker network inspect root_dpm-network-develop -f '{{range .Containers}}{{.Name}} {{end}}')
            if [ ! -z "$CONTAINER_IDS" ]; then
              sudo docker stop $CONTAINER_IDS
              sudo docker rm $CONTAINER_IDS
            fi
          else
            echo "Network root_dpm-network-release does not exist."
          fi

      # 4. 최신 이미지를 컨테이너화하여 실행시킵니다 - release
      - name: docker compose up - release
        if: github.ref == 'refs/heads/release'
        run: |
          cd /root
          sudo docker-compose -p release -f docker-compose-release.yml up -d

      # 4. 최신 이미지를 컨테이너화하여 실행시킵니다 - develop
      - name: docker compose up - develop
        if: github.ref == 'refs/heads/develop'
        run: |
          cd /root
          sudo docker-compose -p develop -f docker-compose-develop.yml up -d

      # 5. 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: sudo docker system prune -f