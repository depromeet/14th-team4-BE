plugins {
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

processResources.dependsOn('copySecret')

tasks.register('copySecret', Copy) {
    from '../Config/server-api/'
    include "application*.yml"  // 복사할 파일들
    into 'src/main/resources'  // 복사 위치
}

configurations {
    asciidoctorExtensions // dependencies 에서 적용한 것 추가
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // 컴파일시 가져올 모듈
    implementation project(":server-domain")
    implementation project(":server-common")

    // spring
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    //jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // junit
    testImplementation 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'

    // asciidoctor
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // lombok test
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Spring Rest Docs 관련 추가
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // h2 db
    runtimeOnly 'com.h2database:h2'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'com.h2database:h2'
    testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '6.2.1'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'


}

ext {
    // 아래서 사용할 변수 선언
    snippetsDir = file('build/generated-snippets')
}


test {
    // 위에서 작성한 snippetsDir 디렉토리를 test의 output으로 구성하는 설정 -> 스니펫 조각들이 build/generated-snippets로 출력
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor { // asciidoctor 작업 구성
    dependsOn test // test 작업 이후에 작동하도록 하는 설정
    configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
    inputs.dir snippetsDir // snippetsDir 를 입력으로 구성

    // source가 없으면 .adoc파일을 전부 html로 만들어버림
    // source 지정시 특정 adoc만 HTML로 만든다.
    sources {
        include("**/index.adoc", "**/common/*.adoc")
    }

    // 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.
    // 개별 adoc으로 운영한다면 필요 없는 옵션입니다.
    baseDirFollowsSourceFile()
}

// static/docs 폴더 비우기
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

// build 의 의존작업 명시
build {
    dependsOn copyDocument
}

bootJar {
    enabled = false
//    layered {
//        isEnabled()
//    }
}

jar { enabled = true }

